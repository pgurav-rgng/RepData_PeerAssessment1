password = "sangli")
str(con)
dbDisconnect(con);
source("http://bioconductor.org/bioCLite.R")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(biocLite)
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
source("http://bioconductor.org/biocLite.R")
BiocManager::install()
getRversion()
BiocManager::available()
biocLite("rhdf5")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
install.packages("BiocManager")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
library(BiocManager)
BiocManager::valid()
BiocInstaller::biocLite(c("hdf5"))
BiocManager::biocLite(c("hdf5"))
library(BiocManager)
BiocInstaller::biocLite(c("hdf5"))
BiocManager::biocLite(c("hdf5"))
BiocInstaller::biocLite(c("hdf5"))
biocLite(c("hdf5"))
biocLite("hdf5")
biocLite("rhdf5")
library(rhdf5)
library(BiocManager)
BiocInstaller::biocLite(c("hdf5"))
BiocInstaller::install("biocLite")
BiocManager::install("biocLite")
biocLite("rhdf5")
BiocManager::install("rhdf5")
library(rhdf5)
h5createFile(""example.h5)
h5createFile(""example.h5"")
h5createFile(""example.h5")
h5createFile("example.h5")
library(dplyer)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(swirl)
swirl()
2
2
bye
exit
swirl()
swirl::install_course("Getting and Cleaning Data")
swirl()
exit
byw
q()
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df()
cran<-tbl_df("data frame tbl")
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
library(swirl)
swirl()
mydf<-readcsv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
?read.csv
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv(path2csv)
mydf<-read.csv(path2csv,stringAsFactors = FALSE)
skip()
dim(mydf)
head(mydf)
library(dplyr)
package_version(dplyr)
package_version("dplyr")
packageversion("dplyr")
packageversion(dplyr)
skip()
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
skip()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version == "3.0.2",country == "IN")
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
skip()
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
skip()
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2, package,ip_id)
skip()
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
skip()
skip()
summarize(cran, avg_bytes = mean(size))
info()
skip()
by_package
summarize(cran,size)
summarize(by_package,size)
summarize(by_package,mean(size))
?n
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset()
swirl()
?submit
submit(by_package)
skip()
print(tbl,pack_sum)
tbl()
tbl
skip()
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(packsum,count>679)
top_counts<-filter(packsum$count>679)
top_counts<-filter(pack_sum$count>679)
skip()
top_counts
View(top_counts)
top_counts_sorted<-filter(top_counts, arrange(desc(count))
)
skip()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit(summarize2.R)
submit()
SUBMIT()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
submit()
cran %>% select(ip_id,country,package,size) %>% print
submit()
skip()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
swirl()
library(tidyr)
students
?gather
gather(students,sex, count, -grade)
students2
res<-gatehr(students2,key=sex_class,value)
res<-gather(students2,key=sex_class,value)
res<-gather(students2,sex_class,count, -grade)
res
?separate
separate(res,sex_class, sex, class)
separate(data=res,col=sex_class,into=c( "sex", "class"))
bye()
library(swirl)
swirl()
submit()
submit()
submit()
students2
submit()
skip()
students3
?gather
submit()
skip()
?spread
submit()
skip()
?
library(lattice)
library(ggplot2)
library(grDevices)
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
## Save file and close device
dev.off()
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power", cex=0.2)
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot3.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
#output File name
png("plot1.png", width=480, height=480)
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.off()
dev.off()
dev.off()
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
dev.off()
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
globalActivePower <- as.numeric(epcsubset$Global_active_power)
#output File name
#png("plot1.png", width=480, height=480)
dev.copy(png, file="plot1.png", height=480, width=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
## Save file and close device
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot2.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot2.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
dev.off()
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot2.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot3.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot1.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot2.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot3.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/Plot4.R')
install.packages("sqldf")
install.packages("sqldf")
install.packages("sqldf")
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/plot5.R')
install.packages("RSQLite")
install.packages("RSQLite")
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/plot5.R')
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/plot5.R')
library(sqldf
library(sqldf)
source('~/datascience/Exploratort Data analysis/Assignment1/ExData_Plotting1-master/ExData_Plotting1/plot5.R')
library(sqldf)
library(RSQLite)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(swirl)
swirl()
str(mpg)
qplot(displ,hwy,mpg)
skip()
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth")
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
skip()
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
skip()
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
kjLqWIZON71OYRKh
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_poin()
g+geom_point()
skip()
g+geom_point()+geom_smooth("lm")
skip()
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
skip()
skip()
skip()
skip()
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g<-ggplot(data=testdat,aes(x=myx,y=myy))
g<-ggplot(data=testdat,aes(x=myx,y=myy))+geom_line()
g+geom_lin()
g+geom_line()
g+geom_line()+ylim(-3,3)
skip()
g<-ggplot(data=mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = "lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = "lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway",title="Swirl Rules!")
skip()
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill="cut")
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut())
qplot(carat,price,data=diamonds,shape=cut
)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth("lm"))
skip()
qplot(carat,price,data=diamonds,color=cut,geom_smooth(method="lm"),facets=.~cut)
skip()
g<-ggplot(data=diamons,aes(depth,price))
skip()
summary(g)
g+geom_point(alpha=1/3)
skip()
cutpoints
skip()
skip()
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
skip()
skip()
skip()
library(RMySQL)
library(DBI)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(dendrogram(hc))
skip()
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
abline(h=0.5,col="red")
5
abline(h=0.05,col="red")
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(as.dendrogram(denmt))
skip()
distmt
cmat
skip()
skip()
apply(distTmp,2,which.min)
skip()
tapply(x, newClust, mean)
tapply(y, newClust, mean)
skip()
skip()
apply(distTmp2,2,which.min)
skip()
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
skip()
kmeans(dataFrame,centers=3)
kmobj$iter
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
skip()
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
skip()
svd2$d
dim(faceData)
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
dim(ssd)
names(ssd$562:563)
skip()
table(ssd$subject)
sum(table(ssd$subject)))
skip()
table(ssd$activity)
skip()
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(c(1:6))
skip()
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col==unclass(sub1$activity))
skip()
skip()
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
skip()
dim(svd1$u)
skip()
skip()
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
skip()
skip()
skip()
skip()
skip()
plot(kClust$centers[walkdown,1:12],pch=19,ylab="walkdown Cluster")
skip()
setwd("datascience/Reproducible research/week2proj/")
setwd("RepData_PeerAssessment1")
---
title: "Reproducible Research: Peer Assessment 1 :PG"
author: "Pradeep Gurav"
date: "17/02/2020"
output:
html_document:
keep_md: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## What is mean total number of steps taken per day?
### Please note that while plotting all histograms, I have chosen to use
## breaks = 15
### instead of the default value, I think default value for breaks is 5
```{ r }
#set working directory
setwd("datascience/Reproducible research/week2proj/RepData_PeerAssessment1")
#Loading the data
#stepsdata<-read.csv("activity.csv")
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
stepsdata <- read.csv('activity.csv')
summary(stepsdata)
#Get complete cases
stepsminNA <- stepsdata[complete.cases(stepsdata), ]
#Get steps per day
steps_per_day <- aggregate(steps ~ date, stepsdata, sum)
#Plot Histogram
hist(steps_per_day$steps, breaks = 15,main = "Histogram of total number of steps per day", xlab = "Steps per day",col="magenta")
# mean of the total number of steps taken per day
mean(steps_per_day$steps)
# median of the total number of steps taken per day
median(steps_per_day$steps)
```
